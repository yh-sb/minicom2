name: build

on: [push, pull_request]

jobs:
  windows-gcc:
    runs-on: windows-latest
    steps:
      - name: Checkout with submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Cache dependencies
        uses: actions/cache@v3
        id: cache
        with:
          key: ${{ runner.OS }}-cache-${{ hashFiles('.github/workflows/build.yml') }}
          path: C:/mingw64

      - name: Install dependencies (if cache not found)
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          # Install MinGW-w64
          curl.exe -L https://github.com/brechtsanders/winlibs_mingw/releases/download/13.1.0-16.0.2-11.0.0-ucrt-r1/winlibs-x86_64-mcf-seh-gcc-13.1.0-mingw-w64ucrt-11.0.0-r1.zip -o mingw64.zip
          tar -xf mingw64.zip -C C:\
          Copy-Item C:\mingw64\bin\mingw32-make.exe C:\mingw64\bin\make.exe

      - name: Build
        run: |
          $env:Path = "C:\mingw64\bin;" + $env:Path
          make

      - name: Set artifacts suffix (if tag)
        if: startsWith(github.ref, 'refs/tags/') == true
        run: Add-Content $env:GITHUB_ENV "git_suffix=$(git describe --tags --abbrev=0)"

      - name: Set artifacts suffix (if branch)
        if: startsWith(github.ref, 'refs/tags/') != true
        run: Add-Content $env:GITHUB_ENV "git_suffix=$(Write-Output "$(git rev-parse --abbrev-ref HEAD)-$(git rev-parse --short HEAD)")"

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: minicom2-windows-${{env.git_suffix}}
          path: build/minicom2.exe
          if-no-files-found: error

  windows-msvc:
    runs-on: windows-latest
    steps:
      - name: Checkout with submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Build
        run: |
          . cmd /s /c "`"$(. "${Env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath)\VC\Auxiliary\Build\vcvarsall.bat`" x64 > NUL && set" | Foreach-Object { $name, $value = $_ -split '=', 2; Set-Content env:\"$name" $value }
          cmake . -Bbuild -G Ninja -DCMAKE_BUILD_TYPE=Debug
          cmake --build build -j

  linux:
    runs-on: ubuntu-22.04
    steps:
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install g++ ninja-build

      - name: Checkout with submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Build
        run: make

      - name: Set artifacts suffix (if tag)
        if: startsWith(github.ref, 'refs/tags/') == true
        run: echo "git_suffix=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV

      - name: Set artifacts suffix (if branch)
        if: startsWith(github.ref, 'refs/tags/') != true
        run: echo "git_suffix=$(git rev-parse --abbrev-ref HEAD)-$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: minicom2-linux-${{env.git_suffix}}
          path: build/minicom2
          if-no-files-found: error
