<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">

    <Type Name="std::array&lt;*&gt;">
        <DisplayString>{{ size={$T2} }}</DisplayString>
        <Expand>
            <Item Name="size">$T2</Item>
            <ArrayItems>
                <Size>$T2</Size>
                <ValuePointer>_M_elems</ValuePointer>
            </ArrayItems>
        </Expand>
    </Type>

    <Type Name="std::vector&lt;*&gt;">
        <DisplayString>{{ size={_M_impl._M_finish - _M_impl._M_start} }}</DisplayString>
        <Expand>
            <Item Name="size">_M_impl._M_finish - _M_impl._M_start</Item>
            <Item Name="capacity">_M_impl._M_end_of_storage - _M_impl._M_start</Item>
            <ArrayItems>
                <Size>_M_impl._M_finish - _M_impl._M_start</Size>
                <ValuePointer>_M_impl._M_start</ValuePointer>
            </ArrayItems>
        </Expand>
    </Type>

    <Type Name="std::deque&lt;*&gt;">
        <DisplayString Condition="(_M_impl._M_start._M_cur + 1) - _M_impl._M_start._M_cur &lt; 512">{{ size={((_M_impl._M_finish._M_node - _M_impl._M_start._M_node + 1) * (512 / sizeof($T1))) - (_M_impl._M_start._M_cur - _M_impl._M_start._M_first) - (_M_impl._M_finish._M_last - _M_impl._M_finish._M_cur)} }}</DisplayString>
        <DisplayString Condition="(_M_impl._M_start._M_cur + 1) - _M_impl._M_start._M_cur &gt;= 512">{{ size={_M_impl._M_finish._M_node - _M_impl._M_start._M_node} }}</DisplayString>
        <Expand>
            <Item Condition="(_M_impl._M_start._M_cur + 1) - _M_impl._M_start._M_cur &lt; 512" Name="size">((_M_impl._M_finish._M_node - _M_impl._M_start._M_node + 1) * (512 / sizeof($T1))) - (_M_impl._M_start._M_cur - _M_impl._M_start._M_first) - (_M_impl._M_finish._M_last - _M_impl._M_finish._M_cur)</Item>
            <Item Condition="(_M_impl._M_start._M_cur + 1) - _M_impl._M_start._M_cur &gt;= 512" Name="size">_M_impl._M_finish._M_node - _M_impl._M_start._M_node</Item>
            <Item Condition="(_M_impl._M_start._M_cur + 1) - _M_impl._M_start._M_cur &lt; 512" Name="capacity">(_M_impl._M_finish._M_node - _M_impl._M_start._M_node + 1) * (512 / sizeof($T1)) - 1</Item>
            <Item Condition="(_M_impl._M_start._M_cur + 1) - _M_impl._M_start._M_cur &gt;= 512" Name="capacity">_M_impl._M_finish._M_node - _M_impl._M_start._M_node</Item>
            <IndexListItems>
                <Size Condition="(_M_impl._M_start._M_cur + 1) - _M_impl._M_start._M_cur &lt; 512">((_M_impl._M_finish._M_node - _M_impl._M_start._M_node + 1) * (512 / sizeof($T1))) - (_M_impl._M_start._M_cur - _M_impl._M_start._M_first) - (_M_impl._M_finish._M_last - _M_impl._M_finish._M_cur)</Size>
                <Size Condition="(_M_impl._M_start._M_cur + 1) - _M_impl._M_start._M_cur &gt;= 512">_M_impl._M_finish._M_node - _M_impl._M_start._M_node</Size>
                <ValueNode Condition="(_M_impl._M_start._M_cur + 1) - _M_impl._M_start._M_cur &lt; 512">*(*(_M_impl._M_start._M_node + (($i + (_M_impl._M_start._M_cur - _M_impl._M_start._M_first)) / (512 / sizeof($T1)))) + (($i + (_M_impl._M_start._M_cur - _M_impl._M_start._M_first)) % (512 / sizeof($T1))))</ValueNode>
                <ValueNode Condition="(_M_impl._M_start._M_cur + 1) - _M_impl._M_start._M_cur &gt;= 512">**(_M_impl._M_start._M_node + $i)</ValueNode>
            </IndexListItems>
        </Expand>
    </Type>

    <Type Name="std::stack&lt;*&gt;">
        <AlternativeType Name="std::queue&lt;*&gt;"/>
        <DisplayString>{c}</DisplayString>
        <Expand>
            <ExpandedItem>c</ExpandedItem>
        </Expand>
    </Type>

    <Type Name="std::forward_list&lt;*&gt;">
        <DisplayString Condition="_M_impl._M_head._M_next == 0">empty</DisplayString>
        <DisplayString Condition="_M_impl._M_head._M_next != 0">{($T1)((std::forward_list&lt;$T1,$T2&gt;::_Node*)_M_impl._M_head)._M_storage}, ...</DisplayString>
        <Expand>
            <LinkedListItems>
                <HeadPointer>(std::forward_list&lt;$T1,$T2&gt;::_Node*)_M_impl._M_head</HeadPointer>
                <NextPointer>_M_next</NextPointer>
                <ValueNode>($T1)_M_storage</ValueNode>
            </LinkedListItems>
        </Expand>
    </Type>

    <Type Name="std::__cxx11::list&lt;*&gt;">
        <DisplayString>{{ size={_M_impl._M_node._M_size} }}</DisplayString>
        <Expand>
            <Item Name="size">_M_impl._M_node._M_size</Item>
            <LinkedListItems Condition="_M_impl._M_node._M_next != &amp;_M_impl._M_node"> <!-- this condition doesn't affect anything here. <Size> matters -->
                <Size>_M_impl._M_node._M_size</Size>
                <HeadPointer>(std::__cxx11::list&lt;$T1,$T2&gt;::_Node*)_M_impl._M_node</HeadPointer>
                <NextPointer>_M_next</NextPointer>
                <ValueNode>($T1)_M_storage</ValueNode>
            </LinkedListItems>
        </Expand>
    </Type>

    <Type Name="std::set&lt;*&gt;">
        <AlternativeType Name="std::multiset&lt;*&gt;"/>
        <DisplayString>{{ size={_M_t._M_impl._M_node_count} }}</DisplayString>
        <Expand>
            <Item Name="size">_M_t._M_impl._M_node_count</Item>
            <TreeItems>
                <Size>_M_t._M_impl._M_node_count</Size>
                <HeadPointer>(std::set&lt;$T1,$T2,$T3&gt;::_Rep_type::_Link_type)_M_t._M_impl._M_header._M_parent</HeadPointer>
                <LeftPointer>_M_left</LeftPointer>
                <RightPointer>_M_right</RightPointer>
                <ValueNode>($T1)_M_storage</ValueNode>
            </TreeItems>
        </Expand>
    </Type>

    <Type Name="std::map&lt;*&gt;">
        <AlternativeType Name="std::multimap&lt;*&gt;"/>
        <DisplayString>{{ size={_M_t._M_impl._M_node_count} }}</DisplayString>
        <Expand>
            <Item Name="size">_M_t._M_impl._M_node_count</Item>
            <TreeItems>
                <Size>_M_t._M_impl._M_node_count</Size>
                <HeadPointer>(std::map&lt;$T1,$T2,$T3,$T4&gt;::_Rep_type::_Link_type)_M_t._M_impl._M_header._M_parent</HeadPointer>
                <LeftPointer>_M_left</LeftPointer>
                <RightPointer>_M_right</RightPointer>
                <ValueNode>(std::pair&lt;$T1,$T2&gt;)_M_storage</ValueNode>
            </TreeItems>
        </Expand>
    </Type>

    <Type Name="std::unordered_set&lt;*&gt;">
        <AlternativeType Name="std::unordered_multiset&lt;*&gt;"/>
        <DisplayString>{{ size={_M_h._M_element_count} }}</DisplayString>
        <Expand>
            <Item Name="size">_M_h._M_element_count</Item>
            <Item Name="bucket count">_M_h._M_bucket_count</Item>
            <Item Name="load factor">(float)_M_h._M_element_count / (float)_M_h._M_bucket_count</Item>
            <Item Name="max load factor">(float)_M_h._M_rehash_policy._M_max_load_factor</Item>
            <LinkedListItems>
                <Size>_M_h._M_element_count</Size>
                <HeadPointer>(std::unordered_set&lt;$T1,$T2,$T3,$T4&gt;::_Hashtable::pointer)_M_h._M_before_begin</HeadPointer>
                <NextPointer>_M_nxt</NextPointer>
                <ValueNode>($T1)_M_storage</ValueNode>
            </LinkedListItems>
        </Expand>
    </Type>

    <Type Name="std::unordered_map&lt;*&gt;">
        <AlternativeType Name="std::unordered_multimap&lt;*&gt;"/>
        <DisplayString>{{ size={_M_h._M_element_count} }}</DisplayString>
        <Expand>
            <Item Name="size">_M_h._M_element_count</Item>
            <Item Name="bucket count">_M_h._M_bucket_count</Item>
            <Item Name="load factor">(float)_M_h._M_element_count / (float)_M_h._M_bucket_count</Item>
            <Item Name="max load factor">(float)_M_h._M_rehash_policy._M_max_load_factor</Item>
            <LinkedListItems>
                <Size>_M_h._M_element_count</Size>
                <HeadPointer>(std::unordered_map&lt;$T1,$T2,$T3,$T4,$T5&gt;::_Hashtable::pointer)_M_h._M_before_begin</HeadPointer>
                <NextPointer>_M_nxt</NextPointer>
                <ValueNode>(std::pair&lt;$T1,$T2&gt;)_M_storage</ValueNode>
            </LinkedListItems>
        </Expand>
    </Type>

    <Type Name="std::priority_queue&lt;*&gt;">
        <DisplayString>{c}</DisplayString>
        <Expand>
            <Item Name="comp">comp</Item>
            <ExpandedItem>c</ExpandedItem>
        </Expand>
    </Type>

    <Type Name="std::unique_ptr&lt;*&gt;">
        <DisplayString Condition="_M_t._M_t._M_head_impl == 0">empty</DisplayString>
        <DisplayString Condition="_M_t._M_t._M_head_impl != 0">{*($T1*)_M_t._M_t._M_head_impl}</DisplayString>
        <Expand>
            <Item Condition="((std::_Tuple_impl&lt;1,$T2&gt;)_M_t._M_t)._M_head_impl" Name="deleter">((std::_Tuple_impl&lt;1,$T2&gt;)_M_t._M_t)._M_head_impl</Item> <!-- Doesn't work -->
            <ExpandedItem>*($T1*)_M_t._M_t._M_head_impl</ExpandedItem>
        </Expand>
    </Type>

    <Type Name="std::shared_ptr&lt;*&gt;">
        <DisplayString Condition="_M_ptr == 0">empty</DisplayString>
        <DisplayString Condition="_M_ptr != 0">{*($T1*)_M_ptr}</DisplayString>
        <Expand>
            <Item Name="strong refs">_M_refcount._M_pi-&gt;_M_use_count</Item>
            <Item Name="weak refs">_M_refcount._M_pi-&gt;_M_weak_count</Item>
            <ExpandedItem>*_M_ptr</ExpandedItem>
        </Expand>
    </Type>

    <Type Name="std::weak_ptr&lt;*&gt;">
        <DisplayString Condition="_M_ptr == 0">empty</DisplayString>
        <DisplayString Condition="_M_ptr != 0">{*($T1*)_M_ptr}</DisplayString>
        <Expand>
            <ExpandedItem>*($T1*)_M_ptr</ExpandedItem>
        </Expand>
    </Type>

    <Type Name="std::initializer_list&lt;*&gt;">
        <DisplayString>{{ size={_M_len} }}</DisplayString>
        <Expand>
            <Item Name="size">_M_len</Item>
            <ArrayItems>
                <Size>_M_len</Size>
                <ValuePointer>_M_array</ValuePointer>
            </ArrayItems>
        </Expand>
    </Type>

    <Type Name="std::pair&lt;*&gt;">
        <DisplayString>({first}, {second})</DisplayString>
        <Expand>
            <Item Name="first">first</Item>
            <Item Name="second">second</Item>
        </Expand>
    </Type>

    <Type Name="std::bitset&lt;*&gt;">
        <DisplayString>{{ size={$T1} }}</DisplayString>
        <Expand>
            <Item Name="size">$T1</Item>
            <IndexListItems Condition="$T1&lt;=32">
                <Size>$T1</Size>
                <ValueNode>(_M_w &gt;&gt; $i) &amp; 1</ValueNode>
            </IndexListItems>
            <IndexListItems Condition="$T1&gt;32">
                <Size>$T1</Size>
                <ValueNode>(_M_w[$i / 32] &gt;&gt; ($i % 32)) &amp; 1</ValueNode>
            </IndexListItems>
        </Expand>
    </Type>

    <Type Name="std::string">
        <AlternativeType Name="std::__cxx11::basic_string&lt;*&gt;"/>
        <DisplayString>{_M_dataplus._M_p,s}</DisplayString>
        <Expand>
            <Item Name="size">_M_string_length</Item>
            <Item Name="capacity" Condition="_M_dataplus._M_p == _M_local_buf">sizeof(_M_local_buf)</Item>
            <Item Name="capacity" Condition="_M_dataplus._M_p != _M_local_buf">_M_allocated_capacity</Item>
            <Item Name="string">_M_dataplus._M_p,s</Item>
            <ArrayItems>
                <Size>_M_string_length</Size>
                <ValuePointer>_M_dataplus._M_p</ValuePointer>
            </ArrayItems>
        </Expand>
    </Type>

    <Type Name="std::string_view">
        <AlternativeType Name="std::basic_string_view&lt;*&gt;"/>
        <DisplayString>{_M_str,s}</DisplayString>
        <Expand>
            <Item Name="size">_M_len</Item>
            <Item Name="string">_M_str,s</Item>
            <ArrayItems>
                <Size>_M_len</Size>
                <ValuePointer>_M_str</ValuePointer>
            </ArrayItems>
        </Expand>
    </Type>

    <Type Name="std::complex&lt;*&gt;">
        <DisplayString>{_M_value}</DisplayString>
    </Type>

    <Type Name="std::valarray&lt;*&gt;">
        <DisplayString>{{ size={_M_size} }}</DisplayString>
        <Expand>
            <ArrayItems>
                <Size>_M_size</Size>
                <ValuePointer>_M_data</ValuePointer>
            </ArrayItems>
        </Expand>
    </Type>

    <Type Name="std::function&lt;*&gt;">
        <DisplayString Condition="_M_manager == 0">empty</DisplayString>
        <DisplayString Condition="_M_manager != 0">{_M_functor._M_unused._M_object}</DisplayString>
        <Expand>
            <ExpandedItem Condition="_M_manager != 0">_M_functor._M_unused._M_object</ExpandedItem>
        </Expand>
    </Type>

    <Type Name="std::chrono::duration&lt;*,std::ratio&lt;1,1000000000&gt;&gt;">
        <DisplayString>{__r} ns</DisplayString>
    </Type>

    <Type Name="std::chrono::duration&lt;*,std::ratio&lt;1,1000000&gt;&gt;">
        <DisplayString>{__r} us</DisplayString>
    </Type>

    <Type Name="std::chrono::duration&lt;*,std::ratio&lt;1,1000&gt;&gt;">
        <DisplayString>{__r} ms</DisplayString>
    </Type>

    <Type Name="std::chrono::duration&lt;*,std::ratio&lt;1,1&gt;&gt;">
        <DisplayString>{__r} s</DisplayString>
    </Type>

    <Type Name="std::chrono::duration&lt;*,std::ratio&lt;60,1&gt;&gt;">
        <DisplayString>{__r} min</DisplayString>
    </Type>

    <Type Name="std::chrono::duration&lt;*,std::ratio&lt;3600,1&gt;&gt;">
        <DisplayString>{__r} h</DisplayString>
    </Type>

    <!-- Iterators -->

    <Type Name="__gnu_cxx::__normal_iterator&lt;*&gt;">
        <AlternativeType Name="std::vector&lt;*&gt;::iterator"/>
        <DisplayString>{{ *{_M_current}={*_M_current} }}</DisplayString>
        <Expand>
            <ExpandedItem>*_M_current</ExpandedItem>
        </Expand>
    </Type>

    <Type Name="std::_List_iterator&lt;*&gt;">
        <AlternativeType Name="std::_List_const_iterator&lt;*&gt;"/>
        <!--<AlternativeType Name="std::__cxx11::list&lt;*&gt;::iterator"/>--> <!-- Doesn't work -->
        <!--<AlternativeType Name="std::__cxx11::list&lt;*&gt;::const_iterator"/>--> <!-- Doesn't work -->
        <DisplayString>{{ *{_M_node}={($T1)((std::_List_node&lt;$T1&gt;*)_M_node)-&gt;_M_storage} }}</DisplayString>
        <Expand>
            <ExpandedItem>($T1)((std::_List_node&lt;$T1&gt;*)_M_node)-&gt;_M_storage</ExpandedItem>
        </Expand>
    </Type>

    <Type Name="std::_Fwd_list_iterator&lt;*&gt;">
        <AlternativeType Name="std::_Fwd_list_const_iterator&lt;*&gt;"/>
        <!--<AlternativeType Name="std::forward_list&lt;*&gt;::iterator"/>--> <!-- Doesn't work -->
        <!--<AlternativeType Name="std::forward_list&lt;*&gt;::const_iterator"/>--> <!-- Doesn't work -->
        <DisplayString>{{ *{_M_node}={($T1)((std::_Fwd_list_node&lt;$T1&gt;*)_M_node)-&gt;_M_storage} }}</DisplayString>
        <Expand>
            <ExpandedItem>($T1)((std::_Fwd_list_node&lt;$T1&gt;*)_M_node)-&gt;_M_storage</ExpandedItem>
        </Expand>
    </Type>

    <Type Name="std::_Rb_tree_iterator&lt;*&gt;">
        <DisplayString>{{ *{_M_node}={($T1)((std::_Rb_tree_node&lt;$T1&gt;*)_M_node)-&gt;_M_storage} }}</DisplayString>
        <Expand>
            <ExpandedItem>($T1)((std::_Rb_tree_node&lt;$T1&gt;*)_M_node)-&gt;_M_storage</ExpandedItem>
        </Expand>
    </Type>

    <Type Name="std::_Deque_iterator&lt;*&gt;">
        <DisplayString>{{ *{_M_cur}={*_M_cur} }}</DisplayString>
        <Expand>
            <ExpandedItem>*_M_cur</ExpandedItem>
        </Expand>
    </Type>

    <!-- Doesn't work -->
    <!--<Type Name="std::reverse_iterator&lt;std::_Deque_iterator&lt;*&gt;&gt;">
        <DisplayString>{{ {*($T1*)(current._M_last)} }}</DisplayString>
        <Expand>
            <ExpandedItem>*($T1*)(current._M_last)</ExpandedItem>
        </Expand>
    </Type>-->

    <Type Name="std::reverse_iterator&lt;*&gt;">
        <DisplayString>{{ {($T1)(current._M_node._M_prev)} }}</DisplayString>
        <Expand>
            <ExpandedItem>($T1)(current._M_node._M_prev)</ExpandedItem>
        </Expand>
    </Type>

    <!-- Doesn't work -->
    <!--<Type Name="std::__cxx11::list&lt;*&gt;::reverse_iterator">
        <AlternativeType Name="std::__cxx11::list&lt;*&gt;::const_reverse_iterator"/>
        <DisplayString>{{ {(std::_List_iterator&lt;$T1&gt;)current._M_node._M_prev} }}</DisplayString>
        <Expand>
            <ExpandedItem>(std::_List_iterator&lt;$T1&gt;)current._M_node._M_prev</ExpandedItem>
        </Expand>
    </Type>-->

</AutoVisualizer>
